// Code generated by MockGen. DO NOT EDIT.
// Source: internal/llm/usecase.go
//
// Generated by this command:
//
//	mockgen -source internal/llm/usecase.go -destination internal/llm/mock/usecase_mock.go --package=mockLLM
//

// Package mockLLM is a generated GoMock package.
package mockLLM

import (
	models "gentest/internal/llm/models"
	reflect "reflect"

	resty "github.com/go-resty/resty/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GenerateResponse mocks base method.
func (m *MockUsecase) GenerateResponse(ollamaReq *models.OllamaRequest) (*resty.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponse", ollamaReq)
	ret0, _ := ret[0].(*resty.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponse indicates an expected call of GenerateResponse.
func (mr *MockUsecaseMockRecorder) GenerateResponse(ollamaReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponse", reflect.TypeOf((*MockUsecase)(nil).GenerateResponse), ollamaReq)
}
