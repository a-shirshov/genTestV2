// Code generated by MockGen. DO NOT EDIT.
// Source: internal/llm/delivery.go
//
// Generated by this command:
//
//	mockgen -source internal/llm/delivery.go -destination internal/llm/mock/delivery_mock.go --package=mockLLM
//

// Package mockLLM is a generated GoMock package.
package mockLLM

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockDelivery is a mock of Delivery interface.
type MockDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryMockRecorder
	isgomock struct{}
}

// MockDeliveryMockRecorder is the mock recorder for MockDelivery.
type MockDeliveryMockRecorder struct {
	mock *MockDelivery
}

// NewMockDelivery creates a new mock instance.
func NewMockDelivery(ctrl *gomock.Controller) *MockDelivery {
	mock := &MockDelivery{ctrl: ctrl}
	mock.recorder = &MockDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelivery) EXPECT() *MockDeliveryMockRecorder {
	return m.recorder
}

// GenerateTest mocks base method.
func (m *MockDelivery) GenerateTest(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GenerateTest", c)
}

// GenerateTest indicates an expected call of GenerateTest.
func (mr *MockDeliveryMockRecorder) GenerateTest(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTest", reflect.TypeOf((*MockDelivery)(nil).GenerateTest), c)
}
